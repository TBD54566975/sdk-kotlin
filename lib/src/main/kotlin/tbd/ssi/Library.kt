/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package tbd.ssi

import com.danubetech.verifiablecredentials.VerifiableCredential
import com.danubetech.verifiablecredentials.jwt.JwtVerifiableCredential
import com.danubetech.verifiablecredentials.jwt.ToJwtConverter
import com.identityfoundry.ddi.protocol.multicodec.Multicodec
import com.identityfoundry.ddi.protocol.multicodec.MulticodecEncoder
import com.nimbusds.jose.jwk.Curve
import com.nimbusds.jose.jwk.OctetKeyPair
import com.nimbusds.jose.jwk.gen.OctetKeyPairGenerator
import io.ipfs.multibase.Multibase


class DIDKey {
    companion object {
        fun generateEd25519(): Pair<OctetKeyPair, String> {
            val jwk = OctetKeyPairGenerator(Curve.Ed25519)
                .keyID("123")
                .generate()
            val publicJWK = jwk.toPublicJWK()

            return Pair(
                jwk,
                "did:key:" + Multibase.encode(
                    Multibase.Base.Base58BTC,
                    MulticodecEncoder.encode(Multicodec.ED25519_PUB, publicJWK.decodedX)))
        }
    }

}

class VerifiableCredentialAPI {
    companion object {
        fun issueCredential(privateKey: OctetKeyPair, vc: VerifiableCredential): String? {
            return ToJwtConverter.toJwtVerifiableCredential(vc).sign_Ed25519_EdDSA(privateKey)
        }

        fun verify(publicKey: OctetKeyPair, vcJWT: String): Boolean {
            return JwtVerifiableCredential.fromCompactSerialization(vcJWT).verify_Ed25519_EdDSA(publicKey)
        }
    }
}
