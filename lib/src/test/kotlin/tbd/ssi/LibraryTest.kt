/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package tbd.ssi

import com.danubetech.verifiablecredentials.CredentialSubject
import com.danubetech.verifiablecredentials.VerifiableCredential
import com.danubetech.verifiablecredentials.credentialstatus.CredentialStatus
import com.danubetech.verifiablecredentials.jsonld.VerifiableCredentialContexts
import foundation.identity.jsonld.JsonLDUtils
import java.net.URI
import kotlin.test.Test
import kotlin.test.assertContains
import kotlin.test.assertTrue


class DIDKeyTest {
    @Test fun generateReturnsValidKey() {
        assertContains(DIDKey.generateEd25519().second, "did:key:z6Mk")
    }

    @Test fun issuedCredentialCanBeVerified() {
        val generated = DIDKey.generateEd25519()

        val claims: MutableMap<String, Any> = LinkedHashMap()
        val degree: MutableMap<String, Any> = LinkedHashMap()
        degree["name"] = "Bachelor of Science and Arts"
        degree["type"] = "BachelorDegree"
        claims["college"] = "Test University"
        claims["degree"] = degree

        val credentialSubject = CredentialSubject.builder()
            .id(URI.create("did:example:ebfeb1f712ebc6f1c276e12ec21"))
            .claims(claims)
            .build()

        val vc = VerifiableCredential.builder()
            .context(VerifiableCredentialContexts.JSONLD_CONTEXT_W3C_2018_CREDENTIALS_EXAMPLES_V1)
            .type("UniversityDegreeCredential")
            .id(URI.create("http://example.edu/credentials/3732"))
            .issuer(URI.create("did:example:76e12ec712ebc6f1c221ebfeb1f"))
            .issuanceDate(JsonLDUtils.stringToDate("2019-06-16T18:56:59Z"))
            .expirationDate(JsonLDUtils.stringToDate("2019-06-17T18:56:59Z"))
            .credentialSubject(credentialSubject)
            .credentialStatus(CredentialStatus.builder()
                .id(URI.create("http://ssi.tbddev.org/v1/credential/status/1234"))
                .type("CredentialStatusList2021")
                .build())
            .build()

        val credJWT = VerifiableCredentialAPI.issueCredential(generated.first, vc)

        // parses headers from the JWT
        // resolved the public key from the "iss" claim.
        // verifies the signatures with pubkey
        // fetches the status list cred
        // verifies the status list cred
        // checks whether the id of this cred is inside the status list.
        assertTrue(VerifiableCredentialAPI.verify(generated.first.toPublicJWK(), credJWT!!))
    }
}
